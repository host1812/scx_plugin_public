PEGASUS_ROOT {
	path,
	--source,
	Directory where source is located,
	Location where Pegasus source code is located.}

PEGASUS_HOME {
	path,
	--binary,
	Directory where built binaries are deposited,
	Location where Pegasus built binaries will be located. Can be the same as PEGASUS_ROOT.}

PEGASUS_HAS_SSL { 
	Boolean, 
	--enable-ssl, 
	Build in SSL support,
	Enabling SSL will compile SSL support in Pegasus. If your SSL include files are located in a non-standard location, make sure to define OPENSSL_HOME with the right directory.}

OPENSSL_BIN {
	PEGASUS_HAS_SSL,
	path,
	--openssl-bin,
	OpenSSL binary directory,
	Specifies the location of the OpenSSL binary. }

OPENSSL_HOME {
	PEGASUS_HAS_SSL,
	path,
	--openssl,
	OpenSSL directory,
	Specifies the location of the OpenSSL SDK directory. This directory must contain the OpenSSL include and library directory. }

PEGASUS_ENABLE_SSLV2 {
	PEGASUS_HAS_SSL,
	Boolean,
	--enable-sslv2,
	Enable SSLv2 protocol,
	By default, support for the SSLV2 protocol is disabled in OpenPegasus 2.5. The option can be used to build a version of OpenPegasus that supports SSV2. This variable affects how SSL contexts are constructed for both the CIM Server and CIM Clients. }

PEGASUS_PAM_AUTHENTICATION {
 	Boolean,
	--enable-pam, 
	Enable PAM support, 
	Enabling PAM will compile PAM support in Pegasus and provide authentication.}

PEGASUS_USE_PAM_STANDALONE_PROC {
	PEGASUS_PAM_AUTHENTICATION,
	Boolean,
	--enable-standalone-pam,
	Enable a PAM workaround,
	PAM authentication has a leak in it. This workaround provides a process which communicates with the CIMserver the authentication information without causing a memory leak in CIMserver.}

PEGASUS_ENABLE_USERGROUP_AUTHORIZATION {
	Boolean,
	--enable-usergroup-auth,
	Enables restriction to CIM operations to specified groups,
	Builds a version of OpenPegasus that allows an administrator to restrict access to CIM operations to members of a designed set of groups.  Refer to the  authorizedUserGroups configuration option for additional details. }

PEGASUS_ENABLE_REMOTE_CMPI {
	Boolean,
	--enable-remote-cmpi,
	Enable Remote CMPI extension,
	Remote CMPI enables providers to be run on remote systems without the need for an extra CIMOM. It uses a special proxying provider to relay requests to a remote location using so-called communication layers. The remote side has to start a CMPIRDaemon process, which accepts remote requests and passes them on to CMPI style providers.  Remote providers are fully binary compatible and need not to be recompiled.  Currently there are two types of remote provider available: out-of-process providers and TCP/IP providers using a separate daemon program.}


PEGASUS_ENABLE_JMPI_PROVIDER_MANAGER {
	Boolean,
	--enable-jmpi,
	Enable Java provider support,
	Enable support for Java providers.}

PEGASUS_ENABLE_EXECQUERY {
	Boolean,
	--enable-execquery,
	Enables ExecQuery CIM support,
	When this environment variable is set, processing of ExecQuery operations is enabled. When not set, ExecQuery operation requests get a NotSupported response. }

PEGASUS_ENABLE_COMPRESSED_REPOSITORY {
	Boolean,
	--enable-compressed-repository,
	Enables compressed repository,
	If set the Repository Comopression logic is built and enabled and compressed and non compressed repositories are supportted. If not set then compressed repositories are not supporttted. See readme.compression for more details. }

PEGASUS_ENABLE_SLP {
	Boolean,
	--enable-slp,
	Enable SLP support,
	Enables Service Locator Protocol. SLP is used in discovery of CIMOMs location.}

PEGASUS_DEBUG {
	Boolean,
	--enable-debug,
	Compile in debug statements,
	Provide more debug information.}

PEGASUS_USE_RELEASE_CONFIG_OPTIONS {
	Boolean,
	--use-release-config-options,
	Compile code with release config options,
	Compile the code with release config options built-in.}

PEGASUS_USE_RELEASE_DIRS {
	Boolean,
	--use-release-dirs,
	Compile code with release dirs,
	Compile code with release dirs built in.}

PEGASUS_DISABLE_LOCAL_DOMAIN_SOCKET {
	Boolean,
	--disable-domain-socket,
	Disables support for domain socket connection,
	Disables support for local (same-system) connections over a Unix domain socket. If this option is NOT set, the CIM Server is built to allow connections to be established using a domain socket rather than a TCP port. }

PEGASUS_DISABLE_PERFINST { 
	Boolean, 
	--disable-perfinst, 
	Disables support for gathering performance data,
	Builds a version of OpenPegasus that disables support for gathering performance data.  The CIM_ObjectManager.GatherStatisticalData property is used to control statistic gathering. }

PEGASUS_DISABLE_PROV_USERCTXT {
	Boolean,
	--disable-prov-userctxt,
	Disables support for the Provider User Context feature,
	Builds a version of OpenPegasus that disables supports for the Provider User Context feature.  This feature allows a Provider to choose the user context in which it is invoked, including the ability to run in the context of the user requesting an operation. The Provider User Context feature may be disabled by compiling with the PEGASUS_DISABLE_PROV_USERCTXT flag defined. In this case, the Provider Registration Manager rejects provider registration requests that specify a UserContext property value. The user context in which providers run is then unchanged by this enhancement. Some platforms, such as OS/400 and z/OS may define the PEGASUS_DISABLE_PROV_USERCTXT as part of the platform configuration, since these platforms already set the provider user context on a per-thread basis.  When the Provider User Context feature is enabled, support for each of the User Context types may be disabled individually. Provider registration fails when an unsupported UserContext value is specified. }

PEGASUS_DISABLE_PROV_USERCTXT_CIMSERVER {
	PEGASUS_DISABLE_PROV_USERCTXT,
	Boolean,
	--disable-prov-userctxt-cimserver,
	Disables support for the Provider User Context "CIM Server" option,
	Builds a version of OpenPegasus that disables support for the Provider User Context "CIM Server" option. Support for the "CIM Server" option allows a Provider to be invoked with the same user context as the CIM Server. This model supports providers that are released together with the CIM Server and for which the CIM Server's user context is known to be acceptable. The provider retains full responsibility for authorizing requesting users. }

PEGASUS_DISABLE_PROV_USERCTXT_DESIGNATED {
	PEGASUS_DISABLE_PROV_USERCTXT,
	Boolean,
	--disable-prov-userctxt-designated,
	Disables support for the Provider User Context "Designated" option,
	uilds a version of OpenPegasus that disables support for the Provider User Context "Designated" option. Support for the "Privileged" option allows a Provider to be invoked in the context of a single, designated user. This option allows a provider to run in a consistent user context with an appropriate level of privilege. The provider retains full responsibility for authorizing requesting users. }

PEGASUS_DISABLE_PROV_USERCTXT_PRIVILEGED {
	PEGASUS_DISABLE_PROV_USERCTXT,
	Boolean,
	--disable-prov-userctxt-privileged,
	Disables support for the Provider User Context "Privileged" option,
	Builds a version of OpenPegasus that disables support for the Provider User Context "Privileged" option. Support for the "Privileged" option allows a Provider to be invoked in the context of a privileged user, potentially escalating the privilege of the requesting user. The provider retains full responsibility for authorizing requesting users. The Privileged User model is much like the Designated User model, except that it clearly declares a privilege requirement and it allows such a provider to be written in a way that is portable across platforms for which the privileged user name differs. }

PEGASUS_DISABLE_PROV_USERCTXT_REQUESTOR {
	PEGASUS_DISABLE_PROV_USERCTXT,
	Boolean,
	--disable-prov-userctxt-requestor,
	Disables support to run providers as the "Requestor.",
	Builds a version of OpenPegasus that will not allow a Provider to run as the "Requestor". Support for the "Requestor" option allows a Provider to be invoked in the context of the user requesting an operation. This option reduces the complexity of writing a provider, because authorization checks that the provider previously had to perform can instead be performed by the underlying platform or managed resource. This reduction in complexity is accompanied by an increase in the security of the solution, because the redundant authorization checks in the provider are likely to miss cases or get out of sync with the authorization model of the managed resource or underlying platform. }

ICU_INSTALL {
	PEGASUS_HAS_MESSAGES,
	path,
	--icu-install,
	Directory with ICU libraries,
	When set, points to the directory containing the  ICU (International Components for Unicode) libraries. Note that the 'lib' sub-directory is appended to this variable. This is used during build to link to ICU. }

ICU_ROOT {
	PEGASUS_HAS_MESSAGES,
	path,
	--icu-root,
	Directory with ICU source code,
	When set, points to the root directory of the  ICU (International Components for Unicode) source tree (ie. the directory before the source directory in the ICU distribution). This is used during build to compile against the ICU header files. }

PEGASUS_HAS_MESSAGES {
	boolean,
	--enable-messages,
	Enable localization support,
	If the PEGASUS_HAS_MESSAGES is not set, OpenPegasus is built without localization support. This means that all messages sent by the CIM Server and the CLIs are in English. ICU is an open source project at http://oss.software.ibm.com/icu. Only English tran/slations are included with the OpenPegasus distribution. The OpenPegasus distribution does not provide translated messages. But, enabling for ICU would allow vendor to provide the translations. Refer to the OpenPegasus Release README for additional information regarding the use of ICU.  }

PEGASUS_ENABLE_CQL {
	Boolean,
	--enable-cql,
	Enables CQL support,
	When this variable is set = true, support for Indication Subscription filters that have CQL as the language is compiled and enabled}

PEGASUS_DISABLE_DEPRECATED_INTERFACES {
	Boolean,
	--disable-deprecated-interfaces,
	 Removes deprecated symbol definitions,
	 Removes deprecated symbol definitions from Pegasus runtime libraries. If this option is set, the resulting Pegasus libraries will not be binary compatible with clients and providers built using interface definitions from prior releases. This option may be used to slightly reduce binary footprint in an environment where compatibility is not required. }

PEGASUS_EXTRA_C_FLAGS {
	flag,
	--extra-c-flags,
	Extra C compiler flags,
	This build option allows a developer to specify an additional set of flags to be included on  the C compile command line. If you don't have any, just leave it blank.}

PEGASUS_EXTRA_CXX_FLAGS {
	flag,
	--extra-cxx-flags,
	Extra C++ compiler flags,
	This build option allows a developer to specify an additional set of flags to be included on the C++ compile command line. If you don't have any, just leave it blank}

PEGASUS_EXTRA_LINK_FLAGS {
	flag,
	--extra-link-flags,
	Extra link flag,
	This build option allows a developer to specify an additional set of flags to be included on the link command line. If you don't have any, just leave it blank}

PEGASUS_REPOSITORY_MODE {
	flag,
	--repository-mode,
	Controls how repository is built,
	Contols if the repository is built in XML or Binary Mode. Only affects he build envirment and not the runtime. Use cimconfig to modify the runtime environment. Possible Values: XML or BIN. XML causes repository to be built in XML mode. BIN causes reposiory to be built in binary mode. }

PEGASUS_NOASSERTS {
	boolean,
	--noasserts,
	Remove asserts,
	Defines the NDEBUG compilation macro, which causes the preprocessor to remove PEGASUS_ASSERT() statements. }
	

