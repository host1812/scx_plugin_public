cimcli(1)							     cimcli(1)



NAME
       cimcli - command line WBEM Client

SYNOPSIS
       cimcli [operation] [object] [options] [extra-parameters] ...

       cimcli is available for all platforms that support the 
              Pegasus CIM Server.


DESCRIPTION
       cimcli is a command line test tool for executing CIM client operations.
       It implements all of the DMTF CIM operations except for the modify and
       create class/instance operations and includes several other  operations
       that are useful in testing including getting all namespaces and enumer-
       ating all instances in a namespace.

       Each execution of cimcli invokes a CIM Operation with the corresponding
       command  parameters  equivalent  to  he  CIM Operations  defined in the
       CIM Operations over HTTP specification.

       In addition to the basic CIM Operations defined in  the	specification,
       this tool implements a number of other specific operations that support
       testing and querying CIM servers including   a  command	to  query  for
       namespaces and to get all instances in a namespace.


       1.     Enumerate	 namespaces  (ns)  -  Returns a list of the namespaces
	      available from the CIMOM.

       2.     Enumerate all instance names (niall) - Returns  a	 list  of  all
	      instance names in the defined namespace.

       2.     Turn CIMServer statistics on and off (At least for the OpenPega-
	      sus server

	      The format of this command is generally:

       cimcli [Operation] [objectname] [options] [extra parameters]


       [Operation]
	      defines the operation to be executed. cimcli executes all of the
	      DMTF  CIM Operations (ex. getclass) and a set of compound opera-
	      tion (enumeratenamespaces). There are two forms for each	Opera-
	      tion definition, a short form typically two characters (i.e. gc)
	      and the long form which is the full name of the operation	 (i.e.
	      getclass).

       [objectname]
	      The name of the object input with the command. This parameter is
	      operation dependent.  For example, with the  getClass  operation
	      the  object  is  a class name.  With the getinstance command the
	      object is an object name. Note that some of the commands do  not
	      require an object.   Thus, for example, the [object] is optional
	      with the enumerateClasses operation as it is with the equivalent
	      enumerateClassNames  CIM	operation.  Normally  this is either a
	      classname or an instancename (classname  plus  keybindings).  In
	      some  operations	one or the other is required.  In other opera-
	      tions, the behavior of the operation  is	dependent  on  whether
	      classname or instancename is supplied.

       [options...]
	      Options  are  identified	on  the	 command line with the - or --
	      notation.	 There are three types of options:


       1.      A set of options that are universal and modify  or  define  the
	       execution  of  the  command  or	the  form of the return.  This
	       includes options like setting  the  output  format  for	object
	       responses or requesting only summary operation.

       2.      A  set  of options that represent the optional input parameters
	       for selected operation. The command defines the	CIM  Operation
	       that will be executed and the options define the optional char-
	       acteristics.  Typical context options  might  be	 -n  namespace
	       (used on most but not all operations)or -niq which sets includ-
	       equalifiers to false for operations that use the	 includeQuali-
	       fiers optional parameter.

       3       A  set  of  options  to display help (-h, --help, --ho to get a
	       list of all options, and -hc to get a  list  of	all  commands.
	       When these options are requested, no operation is executed.

       [extra-parameters]
	       Some of the operations allow or require extra parameters. these
	       are typically keywords or keyword/value pairs and  are  defined
	       as part of the particular options that might use them.

	       Any  extra  parameters  entities on the command line that occur
	       after the [Operation] and are not preceeded by "-" to  indicate
	       an  option  are	considered extra paramters.  These are used in
	       some  of	 the  operations  to  provide  additional  information
	       required	 or  optionally	 desired  by  the operation.  See each
	       operation definition  to	 determine  if	extra  parameters  are
	       required	 or  allowed.  These may be either keyname-value pairs
	       in some cases or simply strings depending on the operation.


	       NOTE: cimcli does not protect the  user against inputting extra
	       options or parameters.  Since the options are heavily dependent
	       on the operation	 to  be	 executed,  it	simply	ignores	 those
	       options	that  are not used with a particular operation.	 Thus,
	       entering the -r option (role)  with  a  getClass	 operation  is
	       syntatically allowed but cimcli ignores the parameter.


UNIVERSAL OPTIONS
       There  is  a  set of options which are general to all of the CIM Opera-
       tions and most of the compound operations and which provide  parameters
       for the initiation or execution of the command.	These include:

       -n [namespace]
	      Namespace	 name  for  this  operation (ex. -n root). The default
	      namespace is root/cimv2.

       -l [location]
	      Host name or IP address and optionally port for this  operation.
	      The default for this command if the the -n option is not used is
	      to use the Pegasus connectLocal() function  to  connect  to  the
	      server. Note that  this  means  that  a  command  like cimcli gc
	      CIM_Door may not work when trying to connect to a	 server	 other
	      than Pegasus on the same system. If cimcli is to be used to con-
              nect to a CIM Server  other than Pegasus  on the same system use
              -l localhost or -l 127.0.0.1  or	the actual name or IP address.
	      This will force cimcli to make the connection in the normal way,
	      not using connectLocal()

       -u [user-name]
	      The  user name to be used in in the connection to the CIM server
	      for the command

       -p [password]
	      The password to be used in the connection to the CIM server  for
	      the command

	      In  addition  there is a set of options that modifies the manner
	      in which the command is executed or the display  of  information
	      on response including the following:


       --t    Measure  time  for  the  operation to be completed and report it
	      upon command completion. If this option is set, the time for the
	      operation	 is  recorded  upon  completion	 of the operation.  In
	      addition, the client infrastructure is qeieried to determine  if
	      the operation execution times optionally measured in the infras-
	      tructure and at the server are available. If they are, they  are
	      displayed	 also.	This would allow the user to see a) time spent
	      in the server, b) round trip time for the operation, c) applica-
	      tion  round trip time for the operation. Note that when combined
	      with the repeat option, the output  includes  maximum,  minimum,
	      and average times for the operation.  There are a specific oper-
	      ations in cimcli to turn control statistics generation (See son 
              and soff operations)

       --r [repeat_count]
	      Repeat the operation repeat_count times. This repeats the opera-
	      tion without disconnecting. This option is useful for setting up
	      tests that load the server with repeated calls and also for get-
	      ting average times for an operation by taking the average	 of  a
	      number  of calls ( when used with the summary information option
	      and the measure time option).

       -delay [seconds]
	      Delay count seconds between connect and operation.

       --sum  Present only summary information, not full output.  Generally it
	      presents	counts of objects returned and response times in place
	      of the names or objects themselves.

       --count [object_count]
	      Defines an expected count of objects expected on	the  response.
	      An  error	 exit  is  generated  if this number of objects is not
	      received.	 This test can be used in batch files to test for num-
	      ber of objects returned by an operation.

       --timeout [seconds]
	      Set  the	connect	 timeout  to  some time other than the default
	      timeout.

       -o [ xml | mof ]
	      Output type for commands that output objects. Used with commands
	      that present CIM objects in their response.

       -verbose
	      Displays details on the options for the CIM Operation and execu-
	      tion.



       OPERATIONS
	      This section defines  the  individual  operations  supported  by
              cimcli.
	      Note  that  the  either the names (ex EnumerateInstances) or the
	      shortcut (ei) may be used in inputting  an  operation  defintion
	      and they they are case independent.


       ci CreateInstance
	      NOTE: This command is not implemented in the current version and
	      return a fixed "NOT IMPLEMENTED" response.  This command	issues
	      the  CIM operation create instance with the parameters provided.
	      It requires the [object] parameter defining the class for	 which
	      the  instance  is	 to be created and also allows for an optional
	      set of parameters that defined properties to be provided in  the
	      following format

		[propertyName]=value

	      If  the  propertyName  parameter	is provided with no value, the
	      default is inserted.  Note that the CIM operation is issued even
	      if the property name is illegal since this is considered to be a
	      test program.

	      The command actually reads the CIM_Class, inserts the properties
	      that  have been defined on the command line using the value type
	      from the class.

	      The command will be rejected if the class does not exist in  the
	      namespace.

	      Example:

		   cimcli ci CIM_door name=abc size=zyx

	      Returns  the  object path of the created instance if the call to
	      the cim server was executed.  Otherwise it returns the exception
	      received.


       ec EnumerateClasses
	      Issues  the  enumerateClasses CIM operation which enumerates the
	      class hiearchy starting at the level defined by <classname>.

	      The format is: cimcli ec [classname] [options]

	      where classname is not required. If it's omitted, cimcli inserts
	      an  empty	 classname  into the CIM operation which tells the CIM
	      Server to start at the top of the class inheritance  tree.   The
	      possible options that represent the parameters of the enumerate-
	      Classes operation are:


	      -niq Boolean (not_include_Qualifiers) that  sets	the  operation
	      parameter for include_quailifers to false.

	      -nlo  Boolean  that defines whether properties from superclasses
	      are included in the response. the -nlo option turns this parame-
	      ter off

	      -cl  Boolean  parameter sets the operation parameter classOrigin
	      in the operation request. the CIMServer is  expected  to	return
	      classOrigin information as part of the response.

	      -pl [propertyList] Optional property list for the operation.

	      Examples	    TBD


       nc EnumerateClassNames
	      Enumerate Class Names.  The format is:

		   cimcli[ <classname> ] [options] where the used options are:

	      The options specific to this operation include;

	      -niq do not include qualifiers

	      -nlo not localOnly

	      -cl class origin

	      -pl [propertyList] optional property list for the operation.

	      On this operation the classname parameter is optional similar to
	      the way the CIM operation is defined.

	      Examples	    TBD


       ni EnumerateInstanceNames
	      Execute the enumerateInstanceNames CIM Operation. The syntax for
	      this operation is:

	      cimcli ni [classname] [options]

	      This  operation  takes as input options specific to this command
	      the following:

		  object - classname for which instancenames are to be enumer-
	      ated.

	      It  displays  the	 instances names that were returned by the CIM
	      server in response to the enumerateInstances CIM operation  with
	      the defined input parameters. if the -s option is set it returns
	      only the count of names returned.

	      In order to provide all of the options allowed for the CIM oper-
	      ation  EnumerateInstances it uses the following options specific
	      to the command:

	      -B -nlo not local only operation parameter to false.  Note  that
	      this  negative  form for the option is used becaused the default
	      for local only parameter	is  true.  Thus,  not  including  this
	      parameter means that the parameter is not set.

	      Example:

		  cimcli ni CIM_ManagedElement -n root/PG_Interop

              	  Execute the enumerateInstanceNames operation on 
                  CIM_ManagedElement class in the root/PG_Interopnamespace.


       ei EnumerateInstances
	      Execute the CIM operation enumerateInstances. The format of this
	      operation is:

	      cimcli ei <className> [options]

	      In order to provide all of the options allowed for the CIM oper-
	      ation EnumerateInstances it uses the following options  specific
	      to the command

	      -nlo not local only operation parameter to false. Note that this
	      negative form for the option is used becaused  the  default  for
	      local only parameter is true. Thus, not including this parameter
	      means that the parameter is not set.

	      -niq Boolean (not_include_Qualifiers) that  sets	the  operation
	      parameter	 for include_quailifers to false, Note that this nega-
	      tive form is used because the  default  for  this	 parameter  is
	      true.

	      -ic  Boolean  to set include class origin operation parameter to
	      true.

	      -di Set deep inheritance operation parameter to true.

	      -o [xml|mof] Set the output format for the instances to  display
	      the returns as mof

	      -pl [propertyList] optional property list for the operation

	      It returns the instances found either as MOF or XML depending on
	      the output options parameter.

	      Example

		  cimcli ei CIM_ComputerSystem -niq -di

		  This example enumerates CIM_ComputerSystem in the  namespace
	          root/CIMV2 (default) requesting without qualifiers (-niq) 
                  with deepInheritance (-di).


       niall enumerateallinstanceNames
	      Execute an enumerateinstancenames on  all	 classes  to  get  all
	      instance	names  within  the  defined  namespace.	 This function
	      searches the complete namespace using the CIM getClass operation
	      to  get  the  classes  and the enumerateInstanceNames command to
	      enumerate all of the instances for each class.  It  returns  the
	      list of all of the instance names found in the namespace.

	      The format is:

	      cimcli niall [options]

	      where  the  options  include  any	 of the universal options (ex.
	      namespace, location, etc.)

	      Example

		  cimcli niall -n test/testproviders

		  Returns  all	instancenames  in  the	namespace 
                  test/testproviders by executing enumerateinstancenames
		  on each class in the namespace.


       mi modifyinstance
	      NOTE: This command is not implemented in the current version and
	      return a fixed "NOT IMPLEMENTED" response.   This	 is  the  same
	      format  as  the  createinstance.	 The  difference  is  that the
	      instance must already exist to be modified.


       gi GetInstance
	      Gets the instance defined by the	instance  name	parameter  and
	      displays	it  in	the  format  chosen for this operation (xml or
	      mof).

	      The syntax for this opration is:

	      CLIgi[objectname][options]

	      which causes execution of the CIM getinstance operation.	OR

	      cimcli gi [class-name] [options]

	      which presents a list of possible instances  to  the  user  from
	      which  one  can  be selected for the getinstance.	 In this case,
	      the command actually executes an enumerateInstanceNames  to  get
	      the  list	 of  instances	that  is  presented  to the user.  The
	      getInstance is executed after the user makes a selection.

	      This command  requieres  the  [objectname]  parameter.   If  the
	      parameter	 is  an	 instance with keys defined (a CIMObjectPath),
	      the a getInstance CIM operation is executed and the return  from
	      the  CIM Server presented (in either xml or mof depending on the
	      ouput option).  If the input is a class name, a enumerateinstan-
	      ceNames  CIM Operation is executed and if any instance names are
	      returned the result is presented to the console for the user  to
	      select one of the instances to be deleted.

	      If  there	 are  no  instances,  the  return from this command is
	      normally an exception as defined	in  the	 DMTF  CIM  Operations
	      specification..


	      The possible options specific to this command are:

	      -iq include qualifiers

	      -nlo localonly

	      -pl [propertyList] optional property list for the operation

	      Example:

		   cimcli gi cim_managedElement

	           This  is an interactive request that returns a list of 
                   instances from an enumerateinstance of CIM_ManagedElement
                   from which the user can select one which cimcli will return
                   as a complete instance.



       di deleteinstance
	      Delete instance executed a single deleteInstance command to  the
	      CIM Server.  The syntax is

		   cimcli di [objectname] [options]

	      This  command  requires  the  [objectname]  parameter.   If this
	      parameter is a full instance name with className and  key	 bind-
	      ings, the deleteInstance CIM Operation is executed directly.  If
	      it is a class name with no keybindings, the   enumerateInstances
	      command is executed and the list of returned instances presented
	      to the console for the user to select one to delete. cimcli then
	      executes	deleteInstance	with  the  selected  instance name and
	      returns the response,

	      return - there is an empty response if the instance was success-
	      fully deleted or an exception return if there were any errors.

	      cimcli di [object] [options]

	      Examples:


	           cimcli di PG_test

	           Executes enumerateInstanceName on PG_test and allows the 
                   user to select the instance to be deleted.

	           cimcli di PG_test.name="abc"

	           Attempts to delete that object in the default namespace.


       gq getQualifier
	      getQualifier displays the target qualifier. The syntax is

	      cimcli gq [qualifier name] [options]

	      Example:	    

                   cimcli gq abstract 

                   Returns the mof or xml for the abstract qualifier.

       sq setQualifier
	      This command is not implemented.


       eq enumeratequalifiers
	      Issues  the  CIM	Operation  to  enumerate all of the qualifiers
	      defined in the target namespace. The syntax is:

		   cimcli eq [options]

	      There are no special options for this operation.


       dq deletequalifier
	      Issues the CIM operation to delete the target qualifier  defined
	      by qualifier_name in the target namespace.  The Syntax is:

	      cimcli dq [qualifier_name] [options]


	      NOTE: This should be used with great caution.


       a associators
	      Enumerate	 the  associators CIM Operation for the target object-
	      name.  The syntax for this operation is:

	      cimcli a [objectname] [options]

	      Note that the objectname may be either a classname or an instan-
	      cename.	If  classname  is  supplied,  the  return  is a set of
	      classes that match the objectname supplied unless the -i (inter-
	      active)  parameter is used.  If objectname is used, the response
	      is instances of the association that matches the classname.

	      The options provide the various operation parameters including;

	      -ac [associationClass] association Class parameter

	      -rc [resultClass] resultClass parameter

	      -r [role] String defining the role parameter for the CIM	Opera-
	      tion

	      -rr [resultrole] resultrole parameter

	      -ic includeClassOrigin The -ic parameter

	      -pl [properytlist] Optional PropertyList

	      -i  Interactive  request - If this parameter is supplied and the
	      objectname is a classname, the
		 environment performs an enumerateinstances on the  objectname
	      and presents the list of possible
		 instances for user selection

       an associatornames
	      Enumerate	 teh associator names for the target object.  The syn-
	      tax for this operation is:

		  cimcli an [objectname] [options]

	      where objectname can be either a class name or an instance name.

	      The options provide the various operation parameters including;

	      -ac [associationClass] association Class parameter

	      -rc [resultClass] resultClass parameter

	      -r  [role] String defining the role parameter for the CIM Opera-
	      tion

	      -rr [resultrole] resultrole parameter

	      -i Interactive request - If this parameter is supplied  and  the
	      objectname is a classname, the
		 environment  performs an enumerateinstances on the objectname
	      and presents the list of possible
		 instances for user selection


       r references
	      Executes	the  CIM  Operation  references.  Which	 returns   CIM
	      Objects.	The format of the operation is:

		   cimcli r [objectname] [options]

	      Note  that the objectname may be either a classname or aninstan-
	      cename.  If classname is	supplied,  the	return	is  a  set  of
	      classes that match the objectname supplier unless the -i (inter-
	      active) parameter is used.  If objectname is used, the  response
	      is instances of the association that matches the classname

	      Where the options specifically used by this operation are:

	      -r [role] role parameter for the CIM Operation.

	      -rc [resultClass] resultClass parameter for the CIM Operation

	      -iq includQualifiers (The default is false)

	      -ic  Boolean  to set include class origin operation parameter to
	      true.

	      -pl [propertyList] optional property list for the operation

	      -i Interactive request - If this parameter is supplied  and  the
	      objectname is a classname, the
		 environment  performs an enumerateinstances on the objectname
	      and presents the list of possible
		 instances for user selection

	      Examples
		  TBD


       rn referencenames
	      Executes the CIM Operation referencenames.  The  format  of  the
	      operation is:

	      cimcli rn [objectname] [options]

	      Note that the objectname may be either a classname or a specific
	      instancename.  If classname is supplied, the return is a set  of
	      classnames  that	match  the  objectname	supplier unless the -i
	      parameter is used.  If  objectname  is  used,  the  response  is
	      instance namess of the associations that matches the classname

	      Where the options specifically used by this operation are:

	      -r role parameter for the CIM Operation

	      -rc resultClass parameter for the CIM Operation

	      -i  Interactive  request - If this parameter is supplied and the
	      objectname is a classname, the
		 environment performs an enumerateinstances on the  objectname
	      and presents the list of possible
		 instances for user selection


       im invokeMethod
	      This  operation  executes	 an  extrinsic	operation to execute a
	      method on a CIM class or instance.  The form of the command is:

	      cimcli im [objectname] [methodname] *[parameters] [options]

	      Note that there  there  are  two	required  parameters  to  this
	      command, the objectname and the [methodname].

	      Parametere are input in the form:

	      The  completed operations displays the return code from the com-
	      mand and any parameters that are qualified as OUT parameters.

	      Example:

		   cimcli PG_WBEMSLPTemplate register -n root/PG_Interop

	      The parameters are supplied as name=value pairs. In the  current
	      version, all parameters are treated as strings.


       eq executeQuery
	       The executeQuery operation is not supported in the current ver-
	      sion of cimcli.


       son    Set the CIMServer	 statistics  to	 enabled  by  doing  a	modify
	      instance	of  the	 CIM_ObjectManager  instance  that defines the
	      server. This depends on the server having implemented statistics
	      and  having  also	 implemented the functionality of enabling and
	      disabling	 statistics   through	setting	  this	 property   in
	      CIM_ObjectManager.  This should be considered a temporary opera-
	      tion in cimcli until a more permanent utility  is	provided  with
	      OpenPegasus  to  manage  this type of functionality.  The corre-
	      sponding operation soff will attempt to  disable	statistics  on
	      the  server.   This works with OpenPegasus servers starting with
	      version 2.5.1.

	      The syntax of the operation is:

	      cimcli son


       soff   See the operaiton son.  This is the corresponding	 operation  to
	      turn  off statistics in the server.  The syntax of the operation
	      is:

	      cimcli soff


       ns enumeratenamespaces
	      Request an Enumeration of all the namespaces in the  target  CIM
	      Server.	This  command uses both the CIM_Namespace class and if
	      that fails, the __Namespace  class  to  determine	 the  list  of
	      namespaces.

	      RETURN  -	 It  returns a list of the namespace names returned by
	      the CIM Server.

	      The format of the operation is:

	      cimcli ns [options]

	      Note that since this operation enumerates namespaces, the names-
	      pace option (-n) is not valid.

	      Examples	    cimcli ns

       ? Show Command Options
	      This operation simply shows the Command options


OPTIONS LIST
       There  are  a  significant  number  of options to this utility, some if
       which provide specific information for one or more commands and some of
       which  are universal across all of the commands.	  In general, the pro-
       gram does not check for spurious options so that if you input an option
       that  is not used by a particular operation, it is simply ignored. Note
       that some of the options require parameters.
	The following is an alphabetic list of the options.

       -ac assocaton_class_name
	      The Association Class parameter defines an assocClass string for
	      Associator  calls (associators and associatornames).  Default().
	      Example: -ac CIM_ManagedElement

       -ar [association_role_name]
	      Defines an association role for associator operations.  Example:
	      -ar  dependent.  This  optional  parameter is used only with the
	      association CIM Operations.

       -count [count]
	      Expected count of objects returned if  the  summary  set.	 Tests
	      this  count  and	display difference. Terminates the cimcli call
	      nonzero if test fails  . Default(). This can be used in  testing
	      to  confirm  that	 a  predefined	number of objects is returned.
	      Example: -count 100 will expect  100  objects  or	 names	to  be
	      returned

       -delay [time in seconds]
	      Delay  between  connection  and  request	.  Default(0). example
	      -delay 3 delays 3 seconds between the call and  the  transmisson
	      of  the actual CIM operation.  This is used only in some testing
	      environments.

       -di    Specifies the boolean parameter  deepInheritance	parameter  for
	      selected	commands.  Setting this options causes the deepinheri-
	      tance=tru to be transmitted for the operation.  Note  that  this
	      means  different	things	to different commands and is used only
	      with the enumerate commands.

       -ic    Boolean to set include class origin operation parameter to true.

       -iq    (DEPRECATED}Specifies   the  includeQualifiers  operation	 input
	      paramter for selected commands.Since the server default for this
	      parameter	 is  normally true, This option is deprecated in favor
	      of the -niq parameters

       -l [location]
	      Define CIMServer host address for the operation.	This  includes
	      either  name  or	IP  address  and  optional  port  number(Host-
	      Name:port).  The default is localhost:5988.   If	name  is  used
	      without  port,  port 5988 is assumed.  Examples include -l fred,
	      -l fred:9999, -l 10.1.134.66 -l 10.1.134.123:5977


       -lo    Specifies the localOnly operation parameter  for	selected  com-
	      mands  if the option is set.  See the commands for more informa-
	      tion. This option is Deprecated in favor of the -nlo because the
	      default for local only is on so that generally the -lo is simply
	      the default.  We recommend using -nlo to turn off local only.


       -n [Namespace]
	      Defines the namespace for the operation.host name.  The  default
	      is    root/cimv2.	   exmple    -n	  root/PG_Interop   sets   the
	      root/PG_Interop namespace as the namespace for the current oper-
	      ation.


       -p [password]
	      Allows input of a password for server authentication of the com-
	      mand. ( ex. -p 12345678). The default is	that  the  command  is
	      submitted with no password.


       -u [User]
	      Defines  nser  ame  for CIM Server authentication. Default is no
	      user name and no authentication.	( ex -u john)  Default	is  no
	      user name and no authentication.


       -lo    DEPRECATED.  This	 was  used  to set LocalOnly. However, default
	      should be true and we cannot use True as	default.   See	-nlo .
	      Default(true).


       -nlo   When  set,  sets	LocalOnly  =  false  on	 the  CIM  operation .
	      Default(false).


       -niq   Sets includeQualifiers = false on operations. Default(false).


       -pl [propertyList]
	      Defines a propertyName List which is an  optional	 parmeter  for
	      some  CIM	 Operations.  Format  is  p1,p2,p3  (without  spaces).
	      Default is that the property list is set to NULL indicating nor-
	      mally  that  the	operation  should  return all properties.  The
	      property list typically has 3 possibilities 1) empty which means
	      return  no  properties, 2) list of properties to be returned, 3)
	      NULL which means return all properties.  Since  the  default  is
	      NULL,  not  applying  the	 option	 means that all properties are
	      being requested.	To set this parameter to empty	use  the  form
	      -pl "".



       -r [role]
	      Defines a role string for reference role parameter. Default()


       -rc [resultClass]
	      Defines  a  resultClass  string for References and Associatiors.
	      Default()


       -rr [resultRole]
	      Defines a	 role  string  for  associators	 operation  resultRole
	      parameter. . Default()


       -ip [inputParameterList]
	      Defines	an   invokeMethod  input  parameter  list.  Format  is
	      p1=v1,p2=v2,..,pn=vn (without spaces) . Default()


       -f [filter]
	      Defines a filter to use for query. One String input . Default()


       -o [ xml | mof ]
	      Output in xml, mof, txt. Default(mof) if the -o options  is  not
	      included.


       -x     Output objects in xml instead of mof format. Default(false)


       /B --v Displays cimcli and Pegasus software Version.


       -v     Verbose	Display.  Includes  Detailed  Param  Input  display  .
	      Default(false). Outputs extra information about  the  parameters
	      actually	used in the request and the return from the operation.
	      This is primarily a debugging tool.


       --sum  Displays only  summary  counts  for  enumerations,  associators,
	      etc.This	option	is used to with the repeat option to repeat an
	      operation without getting the full return display.   It  reduces
	      the  display  to summary information.  It is often used with the
	      time option --t to generate time for  execution  information  on
	      many repetitions of a command.


       -h     Prints help usage message.


       --help Prints full help message with commands, options, examples.


       -ho    Prints list of cimcli options.


       -hc    Prints cimcli Operation command list. This list includes the CIM
	      Operatons defined by the CIM Operations specification and	 other
	      operations  that	were felt to be useful in testing CIM environ-
	      ments.


       --timeout [seconds]
	      Set the connection timeout in seconds. If not set,  the  timeout
	      is  the default Pegasus client timeout which for Pegasus is nor-
	      mally to about 30 seconds. This option executes the client  call
	      to set timeout.


       -d     More detailed debug messages from cimcli.  This can be useful in
              the case where the user is debugging CIM funtionality.


       -trace [trace_level]
	      Set Pegasus Common Components Trace. Sets	 the  Trace  level.  0
	      isoff. Default(0). The trace level can be set to 0 - 4.


       --r [repeat_count]
	      Number of times to repeat the function. Zero means one time. The
	      option ca be used to repeate an operation within a  single  call
	      to cimcli. It simply repeats the operation defined the number of
	      times defined by the repeate_count within the  same  connection.
	      Thus,  it	 establishes  the  connection  executes	 the operation
	      repeat_count times and then terminates.  It can be used with the
	      --time option to measure execution times for many repetitions of
	      an operation.


       --t    Measure time for the operation and present results. When set the
	      response	time  for  the operation is presented with the command
	      output. If the --r (repeat) option is set, minimum, maximum, and
	      average  times are presented.  Note that the time for the opera-
	      tion itself is presented in addition to  the  overall  time  for
	      connect,	operation,  and	 disconnect.   If statistics are being
	      gathered by the server, setting this option  also	 presents  the
	      server time, and the client round trip time which are calculated
	      by the server and client infrastructure.


       -s     Boolean option thatpecifies that the Client  should  attempt  to
	      connnect	over  the  secure  connection  using  SSL. This option
	      causes  cimcli  to  modify  the  client  connect call to set the
              SSLContext option to the certificate defined with the --cert and
               --key options . If this option is set but neither the --cert or
               --key options are included, the SSLContext for the connect call
               is submitted with the Cert and key marked NULL.


       --cert Defines a certificate to be used with the client connect if  the
	      -s  option  is  set. This is optional and used only  with the -s
	      and --key options.


       --key  Defines a Client private key. This is optional and only  has  an
	      effect on connections made over HTTPS using -s


EXAMPLES
       Execute an enumerateinstancenames CIM operation for the pg_computersys-
       tem Class
       cimcli enumerateinstancenames pg_computersystem  -- enumerateinstances
       of class
	  or
	cimcli ei pg_computersystem    -- Same as above


       Enumerate the class names from the default namespace "root/cimv2"
	cimcli enumerateclassnames -- Enumerate classnames from root/cimv2.

       Enumerate class names from the namespace "root"
	cimcli ec /n root -- Enumerate classnames from namespace root.

	cimcli  ec -o xml	 -- Enumerate classes with XML output starting
        at root
        
       cimcli enumerateclasses CIM_Computersystem -o xml
	   -- Enumerate classes in MOF starting with CIM_Computersystem

	cimcli getclass CIM_door -a -u guest -p guest
	   -- Get class with authentication set and user = guest,  password  =
       guest.

       cimcli rn TST_Person.name=@MIKE@ -n root/sampleprovider -rc TST_Lineage

	cimcli ec -o XML -- enumerate classes and output XML rather than MOF.

	cimcli getqualifiers -- Get the qualifiers in mof output format

BUGS
       Currently at least some platforms and shells  have  problems  with  the
       double-quote  which  is used extensively in object names within CIM. To
       get   around  this,  the  character  ’@’  has been  mapped  to  the
       double-quote so that inputting a command  line  with  this character in
       place of quotes is acceptable.  Thus, for example,

       cimcli rn TST_Person.name=@MIKE@ ...

       is equivalent to

       cimcli rn TST_Person.name-"MIKE" ...

       In this version there is no way to  turn	 this  character  mapping  off
       which means that the @ character is lost.


WARNINGS
RETURN VALUE
       cimcli returns the following codes:

       0 - Successfull execution of the operation.

       1 - Execution error for the operation.


AUTHOR
       Karl Schopmeyer k.schopmeyer@opengroup.org



				     LOCAL			     cimcli(1)
