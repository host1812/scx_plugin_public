/* To be inserted in other files to bypass the chksrc tests */
/* NOCHKSRC */

#line 2 "cimmof_lex.cpp"

#line 4 "cimmof_lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer cimmof__create_buffer
#define yy_delete_buffer cimmof__delete_buffer
#define yy_flex_debug cimmof__flex_debug
#define yy_init_buffer cimmof__init_buffer
#define yy_flush_buffer cimmof__flush_buffer
#define yy_load_buffer_state cimmof__load_buffer_state
#define yy_switch_to_buffer cimmof__switch_to_buffer
#define yyin cimmof_in
#define yyleng cimmof_leng
#define yylex cimmof_lex
#define yylineno cimmof_lineno
#define yyout cimmof_out
#define yyrestart cimmof_restart
#define yytext cimmof_text
#define yywrap cimmof_wrap
#define yyalloc cimmof_alloc
#define yyrealloc cimmof_realloc
#define yyfree cimmof_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 34
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cimmof_restart(cimmof_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int cimmof_leng;

extern FILE *cimmof_in, *cimmof_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE cimmof_lex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-cimmof_lineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < cimmof_leng; ++yyl )\
                    if ( cimmof_text[yyl] == '\n' )\
                        --cimmof_lineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cimmof_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up cimmof_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 * Given that the standard has decreed that size_t exists since 1989,
 * I guess we can afford to depend on it. Manoj.
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cimmof_restart()), so that the user can continue scanning by
	 * just pointing cimmof_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when cimmof_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int cimmof_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow cimmof_wrap()'s to do buffer switches
 * instead of setting up a fresh cimmof_in.  A bit of an expedient, temporary solution ...
 */
static int yy_did_buffer_switch_on_eof;

void cimmof_restart (FILE *input_file  );
void cimmof__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE cimmof__create_buffer (FILE *file,int size  );
void cimmof__delete_buffer (YY_BUFFER_STATE b  );
void cimmof__flush_buffer (YY_BUFFER_STATE b  );
void cimmof_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void cimmof_pop_buffer_state (void );

static void cimmof_ensure_buffer_stack (void );
static void cimmof__load_buffer_state (void );
static void cimmof__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER cimmof__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE cimmof__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE cimmof__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE cimmof__scan_bytes (yyconst char *bytes,int len  );

void *cimmof_alloc (yy_size_t  );
void *cimmof_realloc (void *,yy_size_t  );
void cimmof_free (void *  );

#define yy_new_buffer cimmof__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cimmof_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cimmof__create_buffer(cimmof_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cimmof_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cimmof__create_buffer(cimmof_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *cimmof_in = (FILE *) 0, *cimmof_out = (FILE *) 0;

typedef int yy_state_type;

extern int cimmof_lineno;

int cimmof_lineno = 1;

extern char *cimmof_text;
#define yytext_ptr cimmof_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up cimmof_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	cimmof_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 83
#define YY_END_OF_BUFFER 84
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[300] =
    {   0,
        0,    0,    0,    0,    0,    0,   84,   82,    3,    1,
       22,   82,   82,   82,    9,   10,   82,   20,   42,   82,
       18,   17,   17,   11,   12,   19,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,    7,    8,   81,    5,    6,   35,   24,
       23,   83,   37,   83,   36,    0,   64,    0,    0,   18,
       18,   18,   13,   38,    2,   14,   14,   16,    0,   17,
       17,   81,   81,   65,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   45,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   35,   34,   31,   30,

       33,   32,   25,   26,   27,   28,   29,   36,    0,   21,
        0,    2,    2,   15,   55,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   56,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   36,    0,    0,   13,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   39,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   40,   81,   81,   36,    0,   81,   81,   81,
       79,   81,   81,   81,   41,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   47,   81,

       81,   81,   73,   81,   81,   81,   81,   81,   81,   69,
        4,    0,   81,   81,   80,   81,   81,   81,   57,   81,
       81,   81,   53,   81,   81,   81,   77,   78,   81,   81,
       48,   74,   75,   76,   66,   81,   81,   70,   71,   72,
       43,   81,   67,   81,   81,   81,   63,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   68,   81,   81,
       81,   44,   81,   51,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   54,   46,   52,   81,   81,   81,   81,
       81,   81,   50,   60,   61,   81,   49,   81,   81,   81,
       81,   81,   62,   81,   81,   81,   58,   59,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    1,    1,    8,    9,
       10,   11,   12,   13,   12,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   21,   23,   24,   25,   26,    1,
       27,    1,    1,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   37,   49,   50,   37,
       51,   52,   53,    1,   37,    1,   54,   55,   56,   31,

       32,   57,   34,   35,   36,   37,   37,   58,   39,   59,
       41,   42,   43,   60,   61,   62,   47,   48,   37,   63,
       50,   37,   64,    1,   65,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    1,
        1,    5,    1,    6,    1,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    1,    1,    1,    8,    8,    8,
        8,    9,    8,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    3,    1,    8,    8,    8,    8,    4,    4,    4,
        4,    4,    4,    1,    1
    } ;

static yyconst flex_int16_t yy_base[315] =
    {   0,
        0,    0,   63,   64,  114,  169,  595,  596,  596,  596,
      596,  552,    0,    0,  596,  596,   56,  596,   58,   72,
      213,  263,   68,  596,  596,  596,   46,  552,  557,   60,
       31,   64,    0,   49,  559,  543,   62,   66,  542,  556,
      118,   65,  551,  596,  596,   63,  596,  596,    0,  596,
      596,  314,  596,  596,    0,   67,    0,  578,  139,    0,
      165,  571,  552,  596,  580,  519,  112,  596,    0,    0,
        0,    0,  531,   79,  539,   85,  103,  105,  123,  115,
      124,  183,  149,  138,    0,  159,  538,  155,  210,   58,
      181,  162,  196,  218,  207,  524,    0,  596,  596,  596,

      596,  596,  596,  596,  596,  596,  596,    0,  156,  569,
      564,  572,  596,    0,    0,  533,  211,  201,  541,  220,
      223,  209,  524,  215,  535,  213,  535,  250,  235,  527,
      252,  253,  536,  247,  535,  524,  250,  529,  517,  254,
      531,  252,  501,    0,  527,  283,  307,  265,  528,  195,
      270,  286,  259,  527,  517,  510,  290,  305,  515,    0,
      516,  522,  517,   81,  290,  291,  513,  519,  320,  296,
      309,  295,    0,  330,  489,  596,  510,  512,  316,  525,
        0,  510,  307,  513,    0,  318,  513,  326,  308,  512,
      510,  324,  324,  523,  520,  507,  502,  332,    0,  511,

      497,  475,    0,  460,  331,  334,  467,  470,  457,    0,
        0,  347,  351,  343,    0,  433,  439,  408,    0,  415,
      336,  355,    0,  342,  344,  407,    0,    0,  349,  361,
        0,    0,    0,    0,    0,  355,  366,    0,    0,    0,
      596,  350,    0,  410,  400,  392,    0,  403,  404,  403,
      384,  326,  365,  353,  369,  354,  226,    0,  212,  226,
      215,    0,  359,    0,  365,  219,  218,  365,  379,  176,
      184,  370,  378,    0,    0,    0,  184,  377,  395,  387,
      384,  385,    0,    0,    0,  393,    0,  388,  172,  175,
      169,  173,    0,   81,   72,   69,    0,    0,  596,  451,

      460,  466,  475,  479,  483,  492,  501,  504,  507,  516,
      519,  522,  527,  528
    } ;

static yyconst flex_int16_t yy_def[315] =
    {   0,
      299,    1,  300,  300,  301,  301,  299,  299,  299,  299,
      299,  299,  302,  303,  299,  299,  304,  299,  299,  299,
      299,  299,   22,  299,  299,  299,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  299,  299,  305,  299,  299,  306,  299,
      299,  307,  299,  299,  308,  299,  302,  303,  299,   21,
      304,  304,  309,  299,  310,   21,   21,  299,  311,   22,
       23,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  306,  299,  299,  299,

      299,  299,  299,  299,  299,  299,  299,  312,  299,  303,
      313,  310,  299,  311,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  314,  299,  299,  299,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  299,  299,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,

      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  299,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      299,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,    0,  299,

      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299
    } ;

static yyconst flex_int16_t yy_nxt[662] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,   14,   15,   16,
        8,   17,   18,   19,   20,   21,   22,   23,   23,   23,
       23,   23,   23,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   33,   34,   33,   33,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   33,   33,   33,
       44,    8,   45,   27,   28,   46,   32,   33,   36,   40,
       41,   42,   33,   47,   48,   50,   50,   51,   51,   59,
       79,   60,   61,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   64,   71,   71,   73,   65,   77,   82,   79,
       74,   80,  135,   86,   85,   78,  299,   76,  136,  194,

      298,   81,  195,  297,   73,   93,   74,   82,   94,   87,
      109,  296,  118,   77,   52,   52,   54,   80,   85,   86,
       96,   81,  299,  116,   94,   87,  109,   67,   67,   55,
       55,   55,   55,   55,   55,   55,   55,   55,  118,  116,
      299,   55,   55,   55,   55,   55,   55,   90,  119,  120,
      121,  123,  122,   91,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   92,  119,  120,  299,   55,   55,   55,
       55,   54,  122,   90,  299,  128,  121,  123,   59,   92,
       61,   61,  131,  145,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   68,  127,  128,   55,   55,   55,   55,

       55,   55,  129,  295,  294,  138,  293,  292,  131,  145,
      127,  180,  124,  125,  284,  281,  280,  181,  129,   68,
      137,  138,   55,   55,   55,   55,   59,  126,   66,   66,
       67,   67,   67,   67,   67,   62,   62,  132,  124,  137,
      139,   68,  133,  126,  150,  140,  142,  152,  149,  277,
      276,  153,  156,  154,  134,  273,  139,  272,  158,  271,
      150,  270,  161,  132,  141,  142,  133,   68,  149,  154,
      134,  140,  156,  152,  158,   69,   59,  153,   70,   70,
       71,   71,   71,   71,   71,   71,   71,  160,  161,  163,
      164,   68,  166,  172,  178,  169,  184,  174,  147,  147,

      147,  147,  147,  147,  147,  147,  147,  160,  166,  163,
      164,  169,  172,  174,  183,  182,  184,   68,   99,  188,
      178,  100,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  182,  189,  196,  197,  204,  200,  205,  201,  206,
      183,  202,  203,  214,  217,  188,  207,  222,  208,  196,
      197,  209,  210,  221,  204,  206,  226,  265,  189,  231,
      236,  219,  101,  205,  217,  102,  222,  225,  103,  214,
      104,  237,  105,  106,  241,  107,  101,  219,  242,  221,
      226,  248,  243,  225,  249,  231,  236,  250,  253,  251,
      254,  237,  255,  256,  266,  257,  268,  248,  267,  269,

      241,  243,  274,  250,  242,  251,  279,  253,  275,  278,
      249,  257,  255,  282,  267,  269,  254,  283,  274,  256,
      266,  285,  268,  286,  275,  278,  287,  288,  289,  282,
      290,  291,  279,  264,  263,  262,  283,  285,  261,  260,
      259,  258,  252,  288,  289,  287,  247,  291,  246,  286,
      290,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   57,
      245,  244,   57,   57,   57,   58,  240,   58,   58,   58,
       58,   58,   58,   58,   62,   62,   72,  239,  238,   72,
       72,   72,   97,  235,  234,   97,   97,   97,   97,   97,

       97,   98,   98,   98,   98,   98,   98,   98,   98,   98,
      108,  108,  108,   63,  233,   63,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  114,  114,  114,  144,  144,
      144,  147,  232,  147,  176,  176,  176,  230,  229,  228,
      227,  224,  223,  220,  218,  216,  215,  213,  212,  211,
      199,  198,  193,  192,  191,  190,  187,  186,  185,  179,
      177,  175,  173,  171,  170,  168,  167,  165,  162,  159,
      157,  155,  151,  148,  113,  146,  110,  143,  130,  117,
      115,  299,  113,  111,   59,  110,   95,   89,   88,   84,
       83,   76,   75,   56,  299,    7,  299,  299,  299,  299,

      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299
    } ;

static yyconst flex_int16_t yy_chk[662] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,    3,    4,   17,
       31,   17,   17,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   20,   23,   23,   27,   20,   30,   34,   31,
       27,   32,   90,   38,   37,   30,   23,   46,   90,  164,

      296,   32,  164,  295,   27,   42,   27,   34,   42,   38,
       56,  294,   76,   30,    3,    4,    5,   32,   37,   38,
       46,   32,   23,   74,   42,   38,   56,   67,   67,    5,
        5,    5,    5,    5,    5,    5,    5,    5,   76,   74,
       67,    5,    5,    5,    5,    5,    5,   41,   77,   78,
       79,   81,   80,   41,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   41,   77,   78,   67,    5,    5,    5,
        5,    6,   80,   41,   67,   84,   79,   81,   61,   41,
       61,   61,   88,  109,    6,    6,    6,    6,    6,    6,
        6,    6,    6,   61,   83,   84,    6,    6,    6,    6,

        6,    6,   86,  292,  291,   92,  290,  289,   88,  109,
       83,  150,   82,   82,  277,  271,  270,  150,   86,   61,
       91,   92,    6,    6,    6,    6,   21,   82,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   89,   82,   91,
       93,   21,   89,   82,  118,   94,   95,  120,  117,  267,
      266,  121,  124,  122,   89,  261,   93,  260,  126,  259,
      118,  257,  129,   89,   94,   95,   89,   21,  117,  122,
       89,   94,  124,  120,  126,   21,   22,  121,   22,   22,
       22,   22,   22,   22,   22,   22,   22,  128,  129,  131,
      132,   22,  134,  140,  148,  137,  153,  142,  146,  146,

      146,  146,  146,  146,  146,  146,  146,  128,  134,  131,
      132,  137,  140,  142,  152,  151,  153,   22,   52,  157,
      148,   52,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  151,  158,  165,  166,  170,  169,  171,  169,  172,
      152,  169,  169,  179,  183,  157,  174,  189,  174,  165,
      166,  174,  174,  188,  170,  172,  193,  252,  158,  198,
      205,  186,   52,  171,  183,   52,  189,  192,   52,  179,
       52,  206,   52,   52,  212,   52,   52,  186,  213,  188,
      193,  221,  214,  192,  222,  198,  205,  224,  229,  225,
      230,  206,  236,  237,  253,  242,  255,  221,  254,  256,

      212,  214,  263,  224,  213,  225,  269,  229,  265,  268,
      222,  242,  236,  272,  254,  256,  230,  273,  263,  237,
      253,  278,  255,  279,  265,  268,  280,  281,  282,  272,
      286,  288,  269,  251,  250,  249,  273,  278,  248,  246,
      245,  244,  226,  281,  282,  280,  220,  288,  218,  279,
      286,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  302,
      217,  216,  302,  302,  302,  303,  209,  303,  303,  303,
      303,  303,  303,  303,  304,  304,  305,  208,  207,  305,
      305,  305,  306,  204,  202,  306,  306,  306,  306,  306,

      306,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      308,  308,  308,  309,  201,  309,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  311,  311,  311,  312,  312,
      312,  313,  200,  313,  314,  314,  314,  197,  196,  195,
      194,  191,  190,  187,  184,  182,  180,  178,  177,  175,
      168,  167,  163,  162,  161,  159,  156,  155,  154,  149,
      145,  143,  141,  139,  138,  136,  135,  133,  130,  127,
      125,  123,  119,  116,  112,  111,  110,   96,   87,   75,
       73,   66,   65,   63,   62,   58,   43,   40,   39,   36,
       35,   29,   28,   12,    7,  299,  299,  299,  299,  299,

      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[84] =
    {   0,
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int cimmof__flex_debug;
int cimmof__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *cimmof_text;
#line 1 "cimmof.l"
/*
//%LICENSE////////////////////////////////////////////////////////////////
// 
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
// 
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// 
//////////////////////////////////////////////////////////////////////////
*/
#line 36 "cimmof.l"


#include "cimmofParser.h"
#include "memobjs.h"
#include "cimmof_tab.h"

/*                                                                       */
/*  7/27/2004: bug 1330, support for slash* comments, E Boden, IBM       */
/*  8/14/2004: bug 544,  support for string escape characters, E Boden   */
/*                                                                       */
/*                                                                       */
/*                                                                       */

/* Avoid warn_unused_result warnings in Linux RPM build */
#ifndef ECHO
# define ECHO do { size_t ignored = fwrite(cimmof_text, cimmof_leng, 1, cimmof_out); } while(0)
#endif

/*---------------------------------------------------------------*/
/* These routines wrap certain flex functions, keeping down the  */
/* number of external dependencies                               */
/*---------------------------------------------------------------*/
int get_yy_buf_size_wrapper() { return YY_BUF_SIZE; }

void * get_cimmof__current_buffer_wrapper() {
  return (void *)YY_CURRENT_BUFFER;
}

void * create_cimmof_buffer_wrapper(const FILE *f, int size) {
  return (void *)cimmof__create_buffer((FILE *)f,size);
}

int switch_to_buffer_wrapper(void *buffstate, Boolean closeCurrent) {
  if (closeCurrent)
  {
     if (cimmof_in != NULL)
     {
        fflush(cimmof_in);
        fclose(cimmof_in);
        cimmof_in = NULL;
     }
     cimmof__delete_buffer(YY_CURRENT_BUFFER);
  }
  cimmof__switch_to_buffer((YY_BUFFER_STATE)buffstate);
  return 0;
}

char  strbuf[1024], *strbuf_p, slashx[2];



#line 830 "cimmof_lex.cpp"

#define INITIAL 0
#define myStr 1
#define myHex 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cimmof_wrap (void );
#else
extern int cimmof_wrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( cimmof_text, cimmof_leng, 1, cimmof_out )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( cimmof_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( cimmof_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, cimmof_in))==0 && ferror(cimmof_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(cimmof_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cimmof_lex (void);

#define YY_DECL int cimmof_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after cimmof_text and cimmof_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 90 "cimmof.l"



#line 999 "cimmof_lex.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! cimmof_in )
			cimmof_in = stdin;

		if ( ! cimmof_out )
			cimmof_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cimmof_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				cimmof__create_buffer(cimmof_in,YY_BUF_SIZE );
		}

		cimmof__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of cimmof_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 300 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 299 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < cimmof_leng; ++yyl )
				if ( cimmof_text[yyl] == '\n' )
					   
    cimmof_lineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 93 "cimmof.l"
{ cimmofParser::Instance()->increment_lineno(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 94 "cimmof.l"
{ cimmofParser::Instance()->increment_lineno(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 95 "cimmof.l"
{ /* skip white space */ }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 96 "cimmof.l"
{ return(TOK_CLASS); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 97 "cimmof.l"
{ return(TOK_LEFTCURLYBRACE); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 98 "cimmof.l"
{ return(TOK_RIGHTCURLYBRACE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 99 "cimmof.l"
{ return(TOK_LEFTSQUAREBRACKET); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 100 "cimmof.l"
{ return(TOK_RIGHTSQUAREBRACKET); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 101 "cimmof.l"
{ return(TOK_LEFTPAREN); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 102 "cimmof.l"
{ return(TOK_RIGHTPAREN); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 103 "cimmof.l"
{ return(TOK_COLON); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 104 "cimmof.l"
{ return(TOK_SEMICOLON); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 105 "cimmof.l"
{
                   cimmof_lval.strval = new String(cimmof_text);
                   return(TOK_REAL_VALUE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 108 "cimmof.l"
{ cimmof_lval.strval = new String(cimmof_text);
                   return(TOK_OCTAL_VALUE); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 110 "cimmof.l"
{ cimmof_lval.strval = new String(cimmof_text);
                   return(TOK_HEX_VALUE); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 112 "cimmof.l"
{ cimmof_lval.strval = new String(cimmof_text);
                   return(TOK_BINARY_VALUE); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 114 "cimmof.l"
{ cimmof_lval.strval = new String(cimmof_text);
                   return(TOK_POSITIVE_DECIMAL_VALUE); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 116 "cimmof.l"
{ /* Note: All non-zero unsigned integers are handled above */
                 cimmof_lval.strval = new String(cimmof_text);
                   return(TOK_SIGNED_DECIMAL_VALUE); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 119 "cimmof.l"
{ return(TOK_EQUAL); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 120 "cimmof.l"
{ return(TOK_COMMA); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 121 "cimmof.l"
{ cimmof_lval.strval = new String(cimmof_text);
                   return(TOK_CHAR_VALUE); }
	YY_BREAK
/*--- bugzilla 544 fix; handle string escapes ---

       an impl. decision: invalid escape sequences
       are simply ignored, and left in the string.

       an impl. decision: cimmof_leng is set to the len
       of resulting string, not the len of the matched
       token(s), since they are different, with escapes.
       (but note; cimmof.y does not use cimmof_leng!)

       an impl. req't: strings are returned to parser
       with [no kidding!] enclosing "s.
    */
case 22:
YY_RULE_SETUP
#line 138 "cimmof.l"
{ BEGIN(myStr); strbuf_p = strbuf;
               /**strbuf_p++ = '"';*/ }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 140 "cimmof.l"
{ BEGIN(INITIAL);
               /**strbuf_p++ = '"';*/  *strbuf_p = '\0';
                  cimmof_leng = strbuf_p - strbuf;
                  cimmof_lval.strval = new String(strbuf);
                  return TOK_STRING_VALUE; }
	YY_BREAK
case YY_STATE_EOF(myStr):
#line 145 "cimmof.l"
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 146 "cimmof.l"
{ BEGIN(INITIAL);
               /**strbuf_p++ = '"';*/  *strbuf_p = '\0';
                  cimmof_leng = strbuf_p - strbuf;
                  cimmof_lval.strval = new String(strbuf);
                  return TOK_UNEXPECTED_CHAR; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 151 "cimmof.l"
{ /* backspace */        *strbuf_p++ = '\b'; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 152 "cimmof.l"
{ /* form feed */        *strbuf_p++ = '\f'; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 153 "cimmof.l"
{ /* line feed */        *strbuf_p++ = '\n'; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 154 "cimmof.l"
{ /* carriage return */  *strbuf_p++ = '\r'; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 155 "cimmof.l"
{ /* horizontal tab */   *strbuf_p++ = '\t'; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 156 "cimmof.l"
{ /* single quote */     *strbuf_p++ = '\''; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 157 "cimmof.l"
{ /* double quote */     *strbuf_p++ = '"';  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 158 "cimmof.l"
{ /* backslash */        *strbuf_p++ = '\\'; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 159 "cimmof.l"
{ yy_push_state(myHex);
                  memcpy(slashx,cimmof_text,2);
               }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 162 "cimmof.l"
{ *strbuf_p++ = '\\';
                        *strbuf_p++ = cimmof_text[1]; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 164 "cimmof.l"
{ char *t = cimmof_text;
                            while( *t ) *strbuf_p++ = *t++;
                            *strbuf_p = '\0'; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 167 "cimmof.l"
{ /* get escaped hex digits */
                            char  hexfmt[4];   unsigned int n;
                            sprintf( hexfmt, "%%%dx", cimmof_leng );
                            sscanf(cimmof_text, hexfmt, &n);
                            if (n>255) {
                                memcpy(strbuf_p,slashx,2);
                                strbuf_p += 2;
                                char *t = cimmof_text;
                                while( *t ) *strbuf_p++ = *t++;
                            }
                            else *strbuf_p++ = (char)n;
                                yy_pop_state();
                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 180 "cimmof.l"
{ memcpy(strbuf_p,slashx,2);
                              strbuf_p += 2;
                              *strbuf_p++ = *cimmof_text;
                              yy_pop_state();
                        }
	YY_BREAK
/* --- end of bugzilla 544 fix --- */
case 38:
YY_RULE_SETUP
#line 189 "cimmof.l"
{   int c1=0, c2=yyinput();
                                for(;;) {
                                     if (c2==EOF) break;
                                     if (c1=='*' && c2=='/') break;
                                     c1=c2;
                                     c2=yyinput();
                                }
                        }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(myHex):
#line 197 "cimmof.l"
{ yyterminate(); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 198 "cimmof.l"
{ return(TOK_NULL_VALUE); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 199 "cimmof.l"
{ return(TOK_TRUE); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 200 "cimmof.l"
{ return(TOK_FALSE); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 201 "cimmof.l"
{ return(TOK_PERIOD); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 202 "cimmof.l"
{ return(TOK_PRAGMA); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 203 "cimmof.l"
{ return(TOK_INSTANCE); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 204 "cimmof.l"
{ return(TOK_OF); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 205 "cimmof.l"
{return(TOK_QUALIFIER); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 206 "cimmof.l"
{ return(TOK_SCOPE); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 207 "cimmof.l"
{ return(TOK_SCHEMA); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 208 "cimmof.l"
{return(TOK_ASSOCIATION); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 209 "cimmof.l"
{ return(TOK_INDICATION); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 210 "cimmof.l"
{ return(TOK_PROPERTY); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 211 "cimmof.l"
{ return(TOK_REFERENCE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 212 "cimmof.l"
{ return(TOK_METHOD); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 213 "cimmof.l"
{return(TOK_PARAMETER); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 214 "cimmof.l"
{ return(TOK_ANY); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 215 "cimmof.l"
{ return(TOK_REF); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 216 "cimmof.l"
{ return(TOK_FLAVOR); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 217 "cimmof.l"
{
                                         return(TOK_ENABLEOVERRIDE); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 219 "cimmof.l"
{
                                         return(TOK_DISABLEOVERRIDE); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 221 "cimmof.l"
{ return(TOK_RESTRICTED); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 222 "cimmof.l"
{ return(TOK_TOSUBCLASS); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 223 "cimmof.l"
{ return(TOK_TRANSLATABLE); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 224 "cimmof.l"
{ return(TOK_INCLUDE); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 225 "cimmof.l"
{ cimmof_lval.strval = new String(cimmof_text);
                                       return TOK_ALIAS_IDENTIFIER; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 227 "cimmof.l"
{ return TOK_AS; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 228 "cimmof.l"
{ return(TOK_DT_STR); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 229 "cimmof.l"
{ return(TOK_DT_BOOL); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 230 "cimmof.l"
{ return(TOK_DT_DATETIME); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 231 "cimmof.l"
{ return(TOK_DT_UINT8); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 232 "cimmof.l"
{ return(TOK_DT_UINT16); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 233 "cimmof.l"
{ return(TOK_DT_UINT32); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 234 "cimmof.l"
{ return(TOK_DT_UINT64); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 235 "cimmof.l"
{ return(TOK_DT_SINT8); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 236 "cimmof.l"
{ return(TOK_DT_SINT16); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 237 "cimmof.l"
{ return(TOK_DT_SINT32); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 238 "cimmof.l"
{ return(TOK_DT_SINT64); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 239 "cimmof.l"
{ return(TOK_DT_REAL32); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 240 "cimmof.l"
{ return(TOK_DT_REAL64); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 241 "cimmof.l"
{ return(TOK_DT_CHAR8); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 242 "cimmof.l"
{ return(TOK_DT_CHAR16); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 243 "cimmof.l"
{ cimmof_lval.strval = new String(cimmof_text);
                                         return(TOK_SIMPLE_IDENTIFIER); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 245 "cimmof.l"
{ cimmof_lval.strval = new String(cimmof_text);
                                         return(TOK_UNEXPECTED_CHAR); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 248 "cimmof.l"
ECHO;
	YY_BREAK
#line 1579 "cimmof_lex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed cimmof_in at a new source and called
			 * cimmof_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = cimmof_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( cimmof_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * cimmof_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of cimmof_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cimmof_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cimmof_restart(cimmof_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cimmof_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 300 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 300 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 299);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up cimmof_text */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --cimmof_lineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cimmof_restart(cimmof_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cimmof_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve cimmof_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    cimmof_lineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cimmof_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        cimmof_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            cimmof__create_buffer(cimmof_in,YY_BUF_SIZE );
	}

	cimmof__init_buffer(YY_CURRENT_BUFFER,input_file );
	cimmof__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void cimmof__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cimmof_pop_buffer_state();
	 *		cimmof_push_buffer_state(new_buffer);
     */
	cimmof_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cimmof__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (cimmof_wrap()) processing, but the only time this flag
	 * is looked at is after cimmof_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void cimmof__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	cimmof_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cimmof__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cimmof_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cimmof__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cimmof_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cimmof__create_buffer()" );

	b->yy_is_our_buffer = 1;

	cimmof__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cimmof__create_buffer()
 * 
 */
    void cimmof__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cimmof_free((void *) b->yy_ch_buf  );

	cimmof_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cimmof_restart() or at EOF.
 */
    static void cimmof__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	cimmof__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then cimmof__init_buffer was _probably_
     * called from cimmof_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void cimmof__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cimmof__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void cimmof_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	cimmof_ensure_buffer_stack();

	/* This block is copied from cimmof__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cimmof__switch_to_buffer. */
	cimmof__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void cimmof_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	cimmof__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		cimmof__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cimmof_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)cimmof_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cimmof_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cimmof_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cimmof_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cimmof__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cimmof_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cimmof__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	cimmof__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cimmof_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cimmof__scan_bytes() instead.
 */
YY_BUFFER_STATE cimmof__scan_string (yyconst char * yystr )
{
    
	return cimmof__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to cimmof_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cimmof__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cimmof_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cimmof__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cimmof__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cimmof__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) cimmof_alloc(new_size  );

		else
			(yy_start_stack) = (int *) cimmof_realloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cimmof_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		cimmof_text[cimmof_leng] = (yy_hold_char); \
		(yy_c_buf_p) = cimmof_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		cimmof_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int cimmof_get_lineno  (void)
{
        
    return cimmof_lineno;
}

/** Get the input stream.
 * 
 */
FILE *cimmof_get_in  (void)
{
        return cimmof_in;
}

/** Get the output stream.
 * 
 */
FILE *cimmof_get_out  (void)
{
        return cimmof_out;
}

/** Get the length of the current token.
 * 
 */
int cimmof_get_leng  (void)
{
        return cimmof_leng;
}

/** Get the current token.
 * 
 */

char *cimmof_get_text  (void)
{
        return cimmof_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void cimmof_set_lineno (int  line_number )
{
    
    cimmof_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see cimmof__switch_to_buffer
 */
void cimmof_set_in (FILE *  in_str )
{
        cimmof_in = in_str ;
}

void cimmof_set_out (FILE *  out_str )
{
        cimmof_out = out_str ;
}

int cimmof_get_debug  (void)
{
        return cimmof__flex_debug;
}

void cimmof_set_debug (int  bdebug )
{
        cimmof__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cimmof_lex_destroy(), so don't allocate here.
     */

    /* We do not touch cimmof_lineno unless the option is enabled. */
    cimmof_lineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    cimmof_in = stdin;
    cimmof_out = stdout;
#else
    cimmof_in = (FILE *) 0;
    cimmof_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cimmof_lex_init()
     */
    return 0;
}

/* cimmof_lex_destroy is for both reentrant and non-reentrant scanners. */
int cimmof_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cimmof__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cimmof_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	cimmof_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        cimmof_free((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cimmof_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cimmof_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cimmof_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cimmof_free (void * ptr )
{
	free( (char *) ptr );	/* see cimmof_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 248 "cimmof.l"



void cimmof_yy_less(int n) { yyless(n); }

